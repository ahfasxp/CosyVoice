#!/bin/bash
# Copyright 2024 Alibaba Inc. All Rights Reserved.
. ./path.sh || exit 1;

# --- Custom Single-Speaker Data Configuration ---
# Set these paths to your custom data filelists.
# Each filelist should contain lines in the format: 'path/to/audio.wav|transcript'
custom_train_filelist="data/filelists/my_audio_text_train_filelist.txt"  # REPLACE THIS with the path to your custom training filelist
custom_dev_filelist="data/filelists/my_audio_text_val_filelist.txt"      # REPLACE THIS with the path to your custom validation filelist

# Names to be used for the processed data directories under ./data/
# These directories will store wav.scp, text, utt2spk, etc., generated by prepare_data.py
processed_train_data_name="myvoicespeaker_train"
processed_dev_data_name="myvoicespeaker_dev"
# --- End Custom Configuration ---

stage=0 # Defaulting to 0 as LibriTTS download stage is removed
stop_stage=7

pretrained_model_dir=../../../pretrained_models/CosyVoice-300M

if [ ${stage} -le 0 ] && [ ${stop_stage} -ge 0 ]; then
  echo "Data preparation for custom single-speaker data"
  # Prepare custom training data
  echo "Processing custom training data from filelist: $custom_train_filelist"
  mkdir -p data/$processed_train_data_name
  python local/prepare_data.py --input_filelist $custom_train_filelist --des_dir data/$processed_train_data_name

  # Prepare custom development/validation data
  echo "Processing custom development data from filelist: $custom_dev_filelist"
  mkdir -p data/$processed_dev_data_name
  python local/prepare_data.py --input_filelist $custom_dev_filelist --des_dir data/$processed_dev_data_name
fi

if [ ${stage} -le 1 ] && [ ${stop_stage} -ge 1 ]; then
  echo "Extract campplus speaker embedding, you will get spk2embedding.pt and utt2embedding.pt in data/$processed_train_data_name and data/$processed_dev_data_name dir"
  for x in $processed_train_data_name $processed_dev_data_name; do
    tools/extract_embedding.py --dir data/$x \
      --onnx_path $pretrained_model_dir/campplus.onnx
  done
fi

if [ ${stage} -le 2 ] && [ ${stop_stage} -ge 2 ]; then
  echo "Extract discrete speech token, you will get utt2speech_token.pt in data/$processed_train_data_name and data/$processed_dev_data_name dir"
  for x in $processed_train_data_name $processed_dev_data_name; do
    tools/extract_speech_token.py --dir data/$x \
      --onnx_path $pretrained_model_dir/speech_tokenizer_v1.onnx
  done
fi

if [ ${stage} -le 3 ] && [ ${stop_stage} -ge 3 ]; then
  echo "Prepare required parquet format data for custom data, you should have prepared wav.scp/text/utt2spk/spk2utt/utt2embedding.pt/spk2embedding.pt/utt2speech_token.pt"
  for x in $processed_train_data_name $processed_dev_data_name; do
    mkdir -p data/$x/parquet
    tools/make_parquet_list.py --num_utts_per_parquet 1000 \
      --num_processes 10 \
      --src_dir data/$x \
      --des_dir data/$x/parquet
  done
fi

# # inference
# if [ ${stage} -le 4 ] && [ ${stop_stage} -ge 4 ]; then
#   echo "Run inference. Please make sure utt in tts_text is in prompt_data"
#   for mode in sft zero_shot; do
#     python cosyvoice/bin/inference.py --mode $mode \
#       --gpu 0 \
#       --config conf/cosyvoice.yaml \
#       --prompt_data data/$processed_dev_data_name/parquet/data.list \
#       --prompt_utt2data data/$processed_dev_data_name/parquet/utt2data.list \
#       --tts_text `pwd`/tts_text.json \
#       --llm_model $pretrained_model_dir/llm.pt \
#       --flow_model $pretrained_model_dir/flow.pt \
#       --hifigan_model $pretrained_model_dir/hift.pt \
#       --result_dir `pwd`/exp/cosyvoice/$processed_dev_data_name/$mode
#   done
# fi

# train llm
export CUDA_VISIBLE_DEVICES="0"
num_gpus=1
job_id=1986
dist_backend="nccl"
num_workers=2
prefetch=100
train_engine=torch_ddp
if [ ${stage} -le 5 ] && [ ${stop_stage} -ge 5 ]; then
  echo "Run train. We only support llm traning for now. If your want to train from scratch, please use conf/cosyvoice.fromscratch.yaml"
  if [ $train_engine == 'deepspeed' ]; then
    echo "Notice deepspeed has its own optimizer config. Modify conf/ds_stage2.json if necessary"
  fi
  cat data/$processed_train_data_name/parquet/data.list > data/train.data.list
  cat data/$processed_dev_data_name/parquet/data.list > data/dev.data.list
  for model in llm flow hifigan; do
    torchrun --nnodes=1 --nproc_per_node=$num_gpus \
        --rdzv_id=$job_id --rdzv_backend="c10d" --rdzv_endpoint="localhost:1234" \
      cosyvoice/bin/train.py \
      --train_engine $train_engine \
      --config conf/cosyvoice.yaml \
      --train_data data/train.data.list \
      --cv_data data/dev.data.list \
      --model $model \
      --checkpoint $pretrained_model_dir/$model.pt \
      --model_dir `pwd`/exp/cosyvoice/$model/$train_engine \
      --tensorboard_dir `pwd`/tensorboard/cosyvoice/$model/$train_engine \
      --ddp.dist_backend $dist_backend \
      --num_workers ${num_workers} \
      --prefetch ${prefetch} \
      --pin_memory \
      --use_amp \
      --deepspeed_config ./conf/ds_stage2.json \
      --deepspeed.save_states model+optimizer
  done
fi

# average model
average_num=5
if [ ${stage} -le 6 ] && [ ${stop_stage} -ge 6 ]; then
  for model in llm flow hifigan; do
    decode_checkpoint=`pwd`/exp/cosyvoice/$model/$train_engine/${model}.pt
    echo "do model average and final checkpoint is $decode_checkpoint"
    python cosyvoice/bin/average_model.py \
      --dst_model $decode_checkpoint \
      --src_path `pwd`/exp/cosyvoice/$model/$train_engine  \
      --num ${average_num} \
      --val_best
  done
fi

if [ ${stage} -le 7 ] && [ ${stop_stage} -ge 7 ]; then
  echo "Exporting fine-tuned models for inference speedup."
  finetuned_exp_dir_base="`pwd`/exp/cosyvoice"
  finetuned_export_dir="$finetuned_exp_dir_base/exported_finetuned_model"
  mkdir -p $finetuned_export_dir

  echo "Copying fine-tuned models to $finetuned_export_dir"
  cp $finetuned_exp_dir_base/llm/$train_engine/llm.pt $finetuned_export_dir/llm.pt
  cp $finetuned_exp_dir_base/flow/$train_engine/flow.pt $finetuned_export_dir/flow.pt
  cp $finetuned_exp_dir_base/hifigan/$train_engine/hifigan.pt $finetuned_export_dir/hift.pt
  
  echo "Running JIT export using models from $finetuned_export_dir"
  python cosyvoice/bin/export_jit.py --model_dir $finetuned_export_dir
  echo "Running ONNX export using models from $finetuned_export_dir"
  python cosyvoice/bin/export_onnx.py --model_dir $finetuned_export_dir
  echo "Exported models (JIT/ONNX) are saved in $finetuned_export_dir"
fi
